import express from 'express';
import { Octokit } from '@octokit/rest';
import bodyParser from 'body-parser';
const GITHUB_TOKENS = {
  "skritch-squad": "ghp_YourRealGitHubPATHere"
};
const app = express();
app.use(bodyParser.json());

app.post('/push-to-github', async (req, res) => {
  const { repo, branch, path, content, commitMessage, auth } = req.body;

  const [owner, repoName] = repo.split('/');
const token = GITHUB_TOKENS[auth];
if (!token) {
  return res.status(401).json({ error: "Unauthorized: invalid token key" });
}
const octokit = new Octokit({ auth: token });

  try {
    // Step 1: Get the latest commit SHA and tree for the base branch
    const { data: refData } = await octokit.git.getRef({
      owner,
      repo: repoName,
      ref: `heads/${branch}`
    });

    const latestCommitSha = refData.object.sha;

    // Step 2: Check if the file exists to fetch its SHA
    let existingSha = undefined;
    try {
      const { data: fileData } = await octokit.repos.getContent({
        owner,
        repo: repoName,
        path,
        ref: branch
      });
      if (fileData && fileData.sha) {
        existingSha = fileData.sha;
      }
    } catch (err) {
      if (err.status !== 404) throw err; // only ignore "Not Found" errors
    }

    // Step 3: Commit the new or updated file
    await octokit.repos.createOrUpdateFileContents({
      owner,
      repo: repoName,
      path,
      message: commitMessage,
      content,
      branch,
      sha: existingSha
    });

    // Step 4: (Optional) Open a Pull Request to develop
    if (branch !== 'develop') {
      const pr = await octokit.pulls.create({
        owner,
        repo: repoName,
        head: branch,
        base: 'develop',
        title: commitMessage,
        body: 'Generated by GPT Proxy'
      });
      return res.json({ status: 'success', prUrl: pr.data.html_url });
    }

    res.json({ status: 'success', message: 'Committed to develop' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error.message });
  }
});

app.listen(process.env.PORT || 3000, () => {
  console.log('Proxy server running...');
});
